#!/bin/bash
if [ $# != 4 ]
then
  echo "Usage: $0 RootDir email SVNUser SVNpassword"
  exit -1
fi
currentDir=`pwd`
#Define all the tools included in NAMICExternalProjects
toolsNIRALList=(DTIAtlasBuilder DTIPrep DTIProcess DTIReg DTI_Tract_Stat FiberViewerLight ITKTransformTools \
               neoseg NeosegPipeline niral_utilities ResampleDTIlogEuclidean ShapePopulationViewer SlicerCLI SPHARM-PDM)
toolsExternalList=(ABC ANTs AtlasWerks BatchMake Boost BRAINSTools calatk CLAPACK Cppcheck CTKAPPLAUNCHER DCMTK \
                  DoubleConvert Eigen FFTW GDCM Ipopt ITKv4 JPEG KWStyle LogSymmetricDemons MriWatcher MRParameterMaps MultiAtlas \
                  NIPYPE OpenCV OpenJPEG PCRE python qhull QWT ReferenceAtlas SimpleITK SlicerExecutionModel SlicerJointRicianAnisotropicLMMSEFilter \
                  Swig teem Template TIFF tract_querier UKF UnbiasedNonLocalMeans Uncrustify VTK zlib)
#Get command line options
RootDir=$1
echo "RootDir: $RootDir"
email=$2
echo "email: $email"
svnUser=$3
echo "SVN User: $svnUser"
svnPassword=$4
echo "SVN password: $svnPassword"
#Download NAMICExternalProjects source code. Remove it if it is already there
echo "Git clone"
SOURCE_DIR=$RootDir/NAMICExternalProjects-AutoUpdate
if [ -d $SOURCE_DIR ]
then
  rm -rf $SOURCE_DIR
fi
git clone git@github.com:fbudin69500/NAMICExternalProjects.git $SOURCE_DIR
DOWNLOADDIR=$RootDir/DownloadProjects
if [ ! -d $DOWNLOADDIR ]
then
  echo "Creating $DOWNLOADDIR"
  mkdir $DOWNLOADDIR
fi
#For all the tools we want to update, go download latest version and compare with
#version that is currently included in this project (NAMICExternalProjects). If a
#newer version exists, replace current version included in this project with
#latest version
for tool in ${toolsNIRALList[@]}
do
  cd $DOWNLOADDIR
  echo "-----------------------------------------------------"
  echo "Tool: $tool"
  externalFile=$SOURCE_DIR/SuperBuild/External_${tool}.cmake
  if [ ! -e $externalFile ]
  then
    echo "External file $externalFile not found. Skipping $tool"
    continue
  fi
  var=`grep -c "GIT_REPOSITORY" $externalFile`
  if [ $var -gt 0 ]
  then
    echo "$tool is a git project"
    #get git repository
    var=`grep ".git" $externalFile`
#    gitRepo="git@github.com:"${var#`expr match "$var" '\(.*github.com/\)'`}
#    gitRepo=${gitRepo%`expr match "$var" '.*\(\s*).*\)'`}
    gitRepo="git@github.com:"`expr match "$var" '.*github.com/\(.*\)\s*)'`
    echo "Git repository: $gitRepo"
    #Get source code
    if [ ! -d $tool ]
    then
      echo "git Repository: $gitRepo"
      git clone $gitRepo
    else
      cd $tool
      echo "Pulling"
      git pull
      cd ..
    fi
    cd $DOWNLOADDIR/$tool
    #Get git commit hash used in SuperBuild/External_${tool}.cmake
    var=`grep -c "_GIT_TAG" $externalFile`
    if [ $var -lt 1 ]; then
      var=`grep -c "GIT_TAG" $externalFile`
      if [ $var -ne 1 ]; then
        echo "Git Tag not found in $externalFile. Cannot update current project"
        continue
      fi
      var=`grep "GIT_TAG" $externalFile`
    else
      var=`grep "_GIT_TAG" $externalFile`
    fi
    externalgithash=`expr match "$var" '.*GIT_TAG\s*\(\([0-9]*[a-z]*\)*\)\s)'`
    echo "Git hash in external file: $externalgithash"
    #get current (=latest) commit hash
    currentgithash=`git rev-parse HEAD`
    echo "Current Project Git hash: $currentgithash"
    timeStampExternal=`git log -1 --format="%ct" $externalgithash`
    echo "External time stamp: `git log -1 --format="%ci" $externalgithash` - UNIX format: $timeStampExternal"
    timeStampCurrent=`git log -1 --format="%ct" $currentgithash`
    echo "Current time stamp: `git log -1 --format="%ci" $currentgithash` - UNIX format: $timeStampCurrent"
    #if external commit hash is older than the last commit, we update SuperBuild/External_${tool}.cmake
    if [ $timeStampCurrent > $timeStampExternal ]; then
      #Replace hash in SuperBuild/External_${tool}.cmake
      sed -i "s/$externalgithash/$currentgithash/g" $externalFile
      #Create github diff link
      gitRepo=`expr match "$gitRepo" '\(.*\)\.git'`
      gitRepo=${gitRepo#"git@github.com:"}
      diffmessage="https://www.github.com/$gitRepo/compare/$externalgithash%E2%80%A6$currentgithash"
      cd $SOURCE_DIR
      git add $externalFile
      git commit -m "ENH: Update $tool from $externalgithash to $currentgithash" -m "" -m "$diffmessage"
    fi
    continue
  fi
  var=`grep -c "_REPOSITORY" $externalFile`
  if [ $var -gt 0 ]
  then
    echo "$tool is an SVN project"
    #get svn repository
    var=`grep "_REPOSITORY" $externalFile`
#    svnRepo=`expr match "$var" '.*_REPOSITORY\s*\"*\(http\([a-z]*[A-Z]*:*/*\.*-*_*\)*\)'`
    svnRepo=`expr match "$var" '.*_REPOSITORY\s*\"*\(http.*\)\s*)'`
    svnRepo=`echo $svnRepo | sed 's/\"//g'`
    echo "SVN Repository: $svnRepo"
    #checkout or update project
    if [ ! -d $tool ]
    then
      echo "SVN Repository: $svnRepo"
      svn checkout --username $svnUser --password $svnPassword $svnRepo $tool
    else
      cd $tool
      svn update --username $svnUser --password $svnPassword
      cd ..
    fi
    cd $DOWNLOADDIR/$tool
    #get external revision number
    var=`grep "_REVISION" $externalFile`
    externalrevision=`expr match "$var" '.*_REVISION\s*-r\s*\"\([0-9]*\)'`
    echo "External Revision: $externalrevision"
    #get current revision number
    currentrevision=`svnversion`
    echo "Current Revision: $currentrevision"
    #if mismatch, update external revision
    if [ $currentrevision -gt $externalrevision ] ;then
      #change SuperBuild/External_${tool}.cmake file
      sed -i "s/$externalrevision/$currentrevision/g" $externalFile
      #get tool logs and copy them to the NAMICExternalProjects commit message
      diffmessage=""
      for i in `seq $currentrevision -1 $externalrevision`
      do
        diffmessage=$diffmessage`svn log --password $svnPassword -r $i`"\n"
      done
      cd $SOURCE_DIR
      git add $externalFile
      git commit -m "ENH: Update $tool from revision $externalrevision to $currentrevision" -m "" -m "$diffmessage"
    fi
    continue
  else
    echo "$tool is of an unknown type. Skipping"
  fi
done
cd $SOURCE_DIR
#Update NAMICExternalProjects
git push
cd $currentDir
